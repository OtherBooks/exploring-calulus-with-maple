%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, March 8, 2019 4:49:45 o'clock PM PST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
12.5000 -1.00000 371.484 392.000 rc
0.470588 0 0.0549020 RG
newpath
13.5000 224.442 m
15.4373 225.765 l
17.1230 226.664 l
19.0187 227.416 l
20.9270 227.919 l
21.8766 228.079 l
22.8262 228.183 l
23.7066 228.228 l
24.5870 228.225 l
25.4986 228.172 l
26.4102 228.066 l
27.3530 227.902 l
28.2958 227.679 l
30.1753 227.053 l
32.1086 226.138 l
33.8115 225.086 l
35.7285 223.601 l
37.6534 221.768 l
39.5085 219.660 l
41.1930 217.450 l
43.1960 214.461 l
44.8929 211.640 l
46.8667 208.059 l
48.6139 204.665 l
50.5308 200.762 l
52.3562 196.940 l
54.2608 192.923 l
56.0098 189.280 l
57.8964 185.476 l
59.8560 181.737 l
61.5618 178.710 l
63.4041 175.721 l
65.3074 172.968 l
67.1695 170.620 l
68.9711 168.674 l
70.9714 166.879 l
72.7689 165.577 l
74.6880 164.487 l
76.4270 163.746 l
78.3282 163.184 l
79.2227 163.003 l
80.1171 162.874 l
81.0521 162.793 l
81.9870 162.766 l
82.9011 162.793 l
83.8152 162.871 l
84.7722 163.010 l
85.7291 163.207 l
87.5725 163.761 l
89.4576 164.580 l
91.3270 165.666 l
93.0449 166.926 l
95.0137 168.700 l
96.7747 170.603 l
98.6523 172.969 l
100.449 175.560 l
102.444 178.792 l
104.172 181.866 l
106.133 185.617 l
107.921 189.223 l
109.876 193.298 l
111.563 196.857 l
113.484 200.879 l
115.340 204.656 l
117.194 208.253 l
119.042 211.600 l
120.817 214.549 l
122.736 217.409 l
124.565 219.801 l
126.490 221.960 l
128.232 223.604 l
130.158 225.094 l
132.003 226.221 l
133.843 227.076 l
135.765 227.706 l
136.650 227.911 l
137.535 228.065 l
138.441 228.170 l
139.348 228.225 l
139.848 228.233 l
140.348 228.225 l
140.849 228.202 l
141.349 228.164 l
142.255 228.054 l
143.162 227.892 l
145.015 227.391 l
146.900 226.633 l
148.632 225.698 l
150.479 224.426 l
152.312 222.862 l
154.273 220.836 l
156.003 218.734 l
157.999 215.941 l
159.800 213.093 l
161.583 209.995 l
163.499 206.392 l
165.424 202.551 l
167.175 198.925 l
169.034 195.008 l
170.848 191.194 l
172.815 187.156 l
174.517 183.806 l
176.472 180.192 l
178.310 177.072 l
180.130 174.283 l
181.951 171.813 l
183.809 169.633 l
185.778 167.690 l
187.583 166.228 l
189.366 165.066 l
191.271 164.110 l
193.172 163.425 l
194.025 163.199 l
194.878 163.022 l
195.889 162.873 l
196.899 162.788 l
197.745 162.766 l
198.590 162.789 l
199.579 162.871 l
200.569 163.016 l
201.512 163.212 l
202.456 163.468 l
204.142 164.080 l
206.038 165.020 l
207.946 166.262 l
209.845 167.816 l
211.606 169.559 l
213.429 171.684 l
215.315 174.228 l
217.194 177.106 l
219.128 180.400 l
220.831 183.548 l
222.748 187.317 l
224.673 191.273 l
226.528 195.173 l
228.212 198.722 l
230.215 202.868 l
231.912 206.252 l
233.886 209.968 l
235.633 213.010 l
237.550 216.039 l
239.375 218.597 l
241.280 220.914 l
243.029 222.728 l
244.915 224.358 l
246.875 225.713 l
248.581 226.632 l
250.423 227.376 l
252.327 227.893 l
253.258 228.059 l
254.189 228.169 l
255.089 228.224 l
255.990 228.229 l
256.990 228.175 l
257.991 228.058 l
258.889 227.899 l
259.788 227.687 l
261.707 227.050 l
263.446 226.240 l
265.347 225.079 l
267.136 223.702 l
269.006 221.946 l
270.834 219.902 l
272.748 217.407 l
274.592 214.666 l
276.477 211.538 l
278.346 208.145 l
280.064 204.814 l
282.033 200.809 l
283.794 197.124 l
285.671 193.163 l
287.468 189.417 l
289.464 185.392 l
291.192 182.086 l
293.153 178.597 l
294.940 175.703 l
296.895 172.883 l
298.582 170.751 l
300.504 168.667 l
302.359 166.990 l
304.214 165.629 l
306.062 164.562 l
307.837 163.789 l
309.756 163.207 l
310.670 163.017 l
311.585 162.881 l
312.547 162.795 l
313.509 162.766 l
314.381 162.790 l
315.252 162.861 l
316.215 162.995 l
317.178 163.189 l
319.022 163.734 l
320.862 164.520 l
322.784 165.622 l
324.554 166.913 l
326.367 168.531 l
328.369 170.684 l
330.181 172.975 l
332.034 175.652 l
333.919 178.706 l
335.652 181.781 l
337.499 185.302 l
339.332 188.988 l
341.292 193.069 l
343.022 196.718 l
345.018 200.898 l
346.820 204.566 l
348.602 208.031 l
350.519 211.515 l
352.443 214.707 l
354.194 217.315 l
356.053 219.755 l
357.868 221.807 l
359.835 223.670 l
361.537 224.992 l
363.492 226.202 l
365.329 227.061 l
367.149 227.668 l
368.060 227.887 l
368.971 228.051 l
369.900 228.164 l
370.828 228.223 l
371.321 228.233 l
371.813 228.227 l
372.305 228.207 l
372.797 228.171 l
373.700 228.066 l
374.603 227.909 l
376.385 227.442 l
378.290 226.696 l
380.191 225.677 l
381.984 224.442 l
S
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
13.5000 195.500 m
381.984 195.500 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
282 219 14 15 rc
newpath
288.250 225.250 m
288.458 225.468 288.614 225.692 288.718 225.921  c
288.802 226.067 288.927 226.463 289.093 227.109  c
289.656 226.281 l
289.802 226.072 289.981 225.877 290.195 225.695  c
290.408 225.513 290.593 225.385 290.750 225.312  c
290.854 225.270 290.968 225.250 291.093 225.250  c
291.270 225.250 291.414 225.299 291.523 225.398  c
291.632 225.497 291.687 225.614 291.687 225.750  c
291.687 225.916 291.656 226.031 291.593 226.093  c
291.479 226.197 291.343 226.250 291.187 226.250  c
291.093 226.250 291.000 226.229 290.906 226.187  c
290.708 226.125 290.572 226.093 290.500 226.093  c
290.395 226.093 290.276 226.151 290.140 226.265  c
289.880 226.484 289.567 226.911 289.203 227.546  c
289.718 229.718 l
289.802 230.052 289.869 230.252 289.921 230.320  c
289.974 230.388 290.031 230.421 290.093 230.421  c
290.177 230.421 290.281 230.375 290.406 230.281  c
290.635 230.083 290.833 229.828 291.000 229.515  c
291.218 229.625 l
290.947 230.125 290.609 230.541 290.203 230.875  c
289.974 231.062 289.776 231.156 289.609 231.156  c
289.369 231.156 289.182 231.020 289.046 230.750  c
288.953 230.583 288.770 229.875 288.500 228.625  c
287.833 229.770 287.302 230.505 286.906 230.828  c
286.645 231.046 286.395 231.156 286.156 231.156  c
285.989 231.156 285.833 231.093 285.687 230.968  c
285.593 230.875 285.546 230.750 285.546 230.593  c
285.546 230.458 285.593 230.343 285.687 230.250  c
285.781 230.156 285.895 230.109 286.031 230.109  c
286.166 230.109 286.307 230.177 286.453 230.312  c
286.567 230.406 286.656 230.453 286.718 230.453  c
286.760 230.453 286.822 230.421 286.906 230.359  c
287.104 230.192 287.375 229.843 287.718 229.312  c
288.062 228.781 288.286 228.395 288.390 228.156  c
288.130 227.125 287.989 226.583 287.968 226.531  c
287.875 226.250 287.750 226.052 287.593 225.937  c
287.437 225.822 287.203 225.765 286.890 225.765  c
286.796 225.765 286.687 225.770 286.562 225.781  c
286.562 225.546 l
288.250 225.250 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
13.5000 195.500 m
13.5000 199.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 207 9 16 rc
newpath
18.4531 215.890 m
8.54687 215.890 l
8.54687 215.109 l
18.4531 215.109 l
18.4531 215.890 l
h
f
Q
newpath
18.7656 211.046 m
21.1718 209.859 l
21.4218 209.859 l
21.4218 218.250 l
21.4218 218.802 21.4453 219.148 21.4921 219.289  c
21.5390 219.429 21.6354 219.536 21.7812 219.609  c
21.9270 219.682 22.2239 219.724 22.6718 219.734  c
22.6718 220.000 l
18.9375 220.000 l
18.9375 219.734 l
19.4062 219.724 19.7083 219.682 19.8437 219.609  c
19.9791 219.536 20.0729 219.440 20.1250 219.320  c
20.1770 219.200 20.2031 218.843 20.2031 218.250  c
20.2031 212.890 l
20.2031 212.161 20.1822 211.697 20.1406 211.500  c
20.0989 211.343 20.0338 211.229 19.9453 211.156  c
19.8567 211.083 19.7500 211.046 19.6250 211.046  c
19.4375 211.046 19.1875 211.119 18.8750 211.265  c
18.7656 211.046 l
h
24.5468 215.093 m
24.5468 213.958 24.7161 212.981 25.0546 212.164  c
25.3932 211.346 25.8489 210.739 26.4218 210.343  c
26.8593 210.020 27.3125 209.859 27.7812 209.859  c
28.5416 209.859 29.2239 210.250 29.8281 211.031  c
30.5885 211.989 30.9687 213.291 30.9687 214.937  c
30.9687 216.093 30.8020 217.072 30.4687 217.875  c
30.1354 218.677 29.7109 219.260 29.1953 219.625  c
28.6796 219.989 28.1822 220.171 27.7031 220.171  c
26.7552 220.171 25.9687 219.614 25.3437 218.500  c
24.8125 217.552 24.5468 216.416 24.5468 215.093  c
h
25.9843 215.281 m
25.9843 216.645 26.1510 217.760 26.4843 218.625  c
26.7656 219.354 27.1822 219.718 27.7343 219.718  c
27.9947 219.718 28.2656 219.599 28.5468 219.359  c
28.8281 219.119 29.0416 218.724 29.1875 218.171  c
29.4166 217.328 29.5312 216.140 29.5312 214.609  c
29.5312 213.484 29.4114 212.541 29.1718 211.781  c
29.0052 211.218 28.7812 210.822 28.5000 210.593  c
28.3020 210.427 28.0572 210.343 27.7656 210.343  c
27.4427 210.343 27.1510 210.494 26.8906 210.796  c
26.5364 211.203 26.2968 211.841 26.1718 212.710  c
26.0468 213.580 25.9843 214.437 25.9843 215.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
105.621 195.500 m
105.621 199.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
101 207 9 16 rc
newpath
113.453 215.890 m
103.546 215.890 l
103.546 215.109 l
113.453 215.109 l
113.453 215.890 l
h
f
Q
newpath
118.515 210.062 m
117.937 211.312 l
114.953 211.312 l
114.296 212.640 l
115.588 212.838 116.614 213.322 117.375 214.093  c
118.020 214.750 118.343 215.531 118.343 216.437  c
118.343 216.958 118.239 217.440 118.031 217.882  c
117.822 218.325 117.557 218.703 117.234 219.015  c
116.911 219.328 116.552 219.578 116.156 219.765  c
115.593 220.036 115.015 220.171 114.421 220.171  c
113.828 220.171 113.395 220.070 113.125 219.867  c
112.854 219.664 112.718 219.442 112.718 219.203  c
112.718 219.067 112.776 218.947 112.890 218.843  c
113.005 218.739 113.145 218.687 113.312 218.687  c
113.437 218.687 113.546 218.705 113.640 218.742  c
113.734 218.778 113.895 218.880 114.125 219.046  c
114.500 219.296 114.875 219.421 115.250 219.421  c
115.822 219.421 116.322 219.205 116.750 218.773  c
117.177 218.341 117.390 217.812 117.390 217.187  c
117.390 216.593 117.197 216.036 116.812 215.515  c
116.427 214.994 115.895 214.593 115.218 214.312  c
114.687 214.093 113.963 213.963 113.046 213.921  c
114.953 210.062 l
118.515 210.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 195.500 m
197.742 199.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
193.546 213.093 m
193.546 211.958 193.716 210.981 194.054 210.164  c
194.393 209.346 194.849 208.739 195.421 208.343  c
195.859 208.020 196.312 207.859 196.781 207.859  c
197.541 207.859 198.224 208.250 198.828 209.031  c
199.588 209.989 199.968 211.291 199.968 212.937  c
199.968 214.093 199.802 215.072 199.468 215.875  c
199.135 216.677 198.710 217.260 198.195 217.625  c
197.679 217.989 197.182 218.171 196.703 218.171  c
195.755 218.171 194.968 217.614 194.343 216.500  c
193.812 215.552 193.546 214.416 193.546 213.093  c
h
194.984 213.281 m
194.984 214.645 195.151 215.760 195.484 216.625  c
195.765 217.354 196.182 217.718 196.734 217.718  c
196.994 217.718 197.265 217.599 197.546 217.359  c
197.828 217.119 198.041 216.724 198.187 216.171  c
198.416 215.328 198.531 214.140 198.531 212.609  c
198.531 211.484 198.411 210.541 198.171 209.781  c
198.005 209.218 197.781 208.822 197.500 208.593  c
197.302 208.427 197.057 208.343 196.765 208.343  c
196.442 208.343 196.151 208.494 195.890 208.796  c
195.536 209.203 195.296 209.841 195.171 210.710  c
195.046 211.580 194.984 212.437 194.984 213.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
289.863 195.500 m
289.863 199.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
297.515 210.062 m
296.937 211.312 l
293.953 211.312 l
293.296 212.640 l
294.588 212.838 295.614 213.322 296.375 214.093  c
297.020 214.750 297.343 215.531 297.343 216.437  c
297.343 216.958 297.239 217.440 297.031 217.882  c
296.822 218.325 296.557 218.703 296.234 219.015  c
295.911 219.328 295.552 219.578 295.156 219.765  c
294.593 220.036 294.015 220.171 293.421 220.171  c
292.828 220.171 292.395 220.070 292.125 219.867  c
291.854 219.664 291.718 219.442 291.718 219.203  c
291.718 219.067 291.776 218.947 291.890 218.843  c
292.005 218.739 292.145 218.687 292.312 218.687  c
292.437 218.687 292.546 218.705 292.640 218.742  c
292.734 218.778 292.895 218.880 293.125 219.046  c
293.500 219.296 293.875 219.421 294.250 219.421  c
294.822 219.421 295.322 219.205 295.750 218.773  c
296.177 218.341 296.390 217.812 296.390 217.187  c
296.390 216.593 296.197 216.036 295.812 215.515  c
295.427 214.994 294.895 214.593 294.218 214.312  c
293.687 214.093 292.963 213.963 292.046 213.921  c
293.953 210.062 l
297.515 210.062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
381.984 195.500 m
381.984 199.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
380.765 211.046 m
383.171 209.859 l
383.421 209.859 l
383.421 218.250 l
383.421 218.802 383.445 219.148 383.492 219.289  c
383.539 219.429 383.635 219.536 383.781 219.609  c
383.927 219.682 384.224 219.724 384.671 219.734  c
384.671 220.000 l
380.937 220.000 l
380.937 219.734 l
381.406 219.724 381.708 219.682 381.843 219.609  c
381.979 219.536 382.072 219.440 382.125 219.320  c
382.177 219.200 382.203 218.843 382.203 218.250  c
382.203 212.890 l
382.203 212.161 382.182 211.697 382.140 211.500  c
382.099 211.343 382.033 211.229 381.945 211.156  c
381.856 211.083 381.750 211.046 381.625 211.046  c
381.437 211.046 381.187 211.119 380.875 211.265  c
380.765 211.046 l
h
386.546 215.093 m
386.546 213.958 386.716 212.981 387.054 212.164  c
387.393 211.346 387.849 210.739 388.421 210.343  c
388.859 210.020 389.312 209.859 389.781 209.859  c
390.541 209.859 391.224 210.250 391.828 211.031  c
392.588 211.989 392.968 213.291 392.968 214.937  c
392.968 216.093 392.802 217.072 392.468 217.875  c
392.135 218.677 391.710 219.260 391.195 219.625  c
390.679 219.989 390.182 220.171 389.703 220.171  c
388.755 220.171 387.968 219.614 387.343 218.500  c
386.812 217.552 386.546 216.416 386.546 215.093  c
h
387.984 215.281 m
387.984 216.645 388.151 217.760 388.484 218.625  c
388.765 219.354 389.182 219.718 389.734 219.718  c
389.994 219.718 390.265 219.599 390.546 219.359  c
390.828 219.119 391.041 218.724 391.187 218.171  c
391.416 217.328 391.531 216.140 391.531 214.609  c
391.531 213.484 391.411 212.541 391.171 211.781  c
391.005 211.218 390.781 210.822 390.500 210.593  c
390.302 210.427 390.057 210.343 389.765 210.343  c
389.442 210.343 389.151 210.494 388.890 210.796  c
388.536 211.203 388.296 211.841 388.171 212.710  c
388.046 213.580 387.984 214.437 387.984 215.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
31.9242 195.500 m
31.9242 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
50.3484 195.500 m
50.3484 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
68.7726 195.500 m
68.7726 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
87.1968 195.500 m
87.1968 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
124.045 195.500 m
124.045 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
142.469 195.500 m
142.469 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
160.893 195.500 m
160.893 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
179.317 195.500 m
179.317 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
216.166 195.500 m
216.166 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
234.590 195.500 m
234.590 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
253.014 195.500 m
253.014 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
271.438 195.500 m
271.438 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
308.287 195.500 m
308.287 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
326.711 195.500 m
326.711 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
345.135 195.500 m
345.135 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
363.559 195.500 m
363.559 197.500 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
q
0 J
1 j
newpath
197.742 390.000 m
197.742 1.00000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
154 91 14 15 rc
newpath
160.078 97.2500 m
160.224 97.5000 160.322 97.7317 160.375 97.9453  c
160.427 98.1588 160.484 98.5781 160.546 99.2031  c
160.812 102.328 l
161.072 102.026 161.442 101.541 161.921 100.875  c
162.151 100.552 162.437 100.114 162.781 99.5625  c
162.989 99.2291 163.119 98.9947 163.171 98.8593  c
163.192 98.7864 163.203 98.7135 163.203 98.6406  c
163.203 98.5989 163.187 98.5625 163.156 98.5312  c
163.125 98.5000 163.046 98.4635 162.921 98.4218  c
162.796 98.3802 162.695 98.3072 162.617 98.2031  c
162.539 98.0989 162.500 97.9739 162.500 97.8281  c
162.500 97.6614 162.549 97.5234 162.648 97.4140  c
162.747 97.3046 162.875 97.2500 163.031 97.2500  c
163.218 97.2500 163.377 97.3281 163.507 97.4843  c
163.638 97.6406 163.703 97.8541 163.703 98.1250  c
163.703 98.4583 163.588 98.8411 163.359 99.2734  c
163.130 99.7057 162.690 100.364 162.039 101.250  c
161.388 102.135 160.599 103.104 159.671 104.156  c
159.036 104.875 158.562 105.330 158.250 105.523  c
157.937 105.716 157.671 105.812 157.453 105.812  c
157.317 105.812 157.200 105.760 157.101 105.656  c
157.002 105.552 156.953 105.437 156.953 105.312  c
156.953 105.145 157.023 104.994 157.164 104.859  c
157.304 104.724 157.453 104.656 157.609 104.656  c
157.692 104.656 157.765 104.677 157.828 104.718  c
157.859 104.739 157.895 104.799 157.937 104.898  c
157.979 104.997 158.015 105.062 158.046 105.093  c
158.067 105.114 158.093 105.125 158.125 105.125  c
158.145 105.125 158.187 105.104 158.250 105.062  c
158.489 104.916 158.760 104.687 159.062 104.375  c
159.468 103.958 159.770 103.619 159.968 103.359  c
159.609 99.3437 l
159.557 98.6770 159.471 98.2708 159.351 98.1250  c
159.231 97.9791 159.031 97.9062 158.750 97.9062  c
158.656 97.9062 158.494 97.9218 158.265 97.9531  c
158.218 97.7187 l
160.078 97.2500 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
390.000 390.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 351.100 m
193.742 351.100 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
177 349 9 16 rc
newpath
189.453 357.890 m
179.546 357.890 l
179.546 357.109 l
189.453 357.109 l
189.453 357.890 l
h
f
Q
newpath
194.984 358.343 m
194.984 359.375 l
193.640 359.375 l
193.640 362.000 l
192.437 362.000 l
192.437 359.375 l
188.234 359.375 l
188.234 358.437 l
192.843 351.859 l
193.640 351.859 l
193.640 358.343 l
194.984 358.343 l
h
192.437 358.343 m
192.437 353.406 l
188.953 358.343 l
192.437 358.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 273.300 m
193.742 273.300 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
177 271 9 16 rc
newpath
189.453 279.890 m
179.546 279.890 l
179.546 279.109 l
189.453 279.109 l
189.453 279.890 l
h
f
Q
newpath
194.875 282.093 m
194.187 284.000 l
188.328 284.000 l
188.328 283.734 l
190.046 282.161 191.257 280.875 191.960 279.875  c
192.664 278.875 193.015 277.963 193.015 277.140  c
193.015 276.515 192.822 276.000 192.437 275.593  c
192.052 275.187 191.588 274.984 191.046 274.984  c
190.567 274.984 190.132 275.127 189.742 275.414  c
189.351 275.700 189.062 276.119 188.875 276.671  c
188.609 276.671 l
188.734 275.765 189.049 275.070 189.554 274.585  c
190.059 274.101 190.687 273.859 191.437 273.859  c
192.250 273.859 192.924 274.119 193.460 274.640  c
193.997 275.161 194.265 275.770 194.265 276.468  c
194.265 276.968 194.151 277.474 193.921 277.984  c
193.557 278.776 192.968 279.609 192.156 280.484  c
190.947 281.817 190.187 282.619 189.875 282.890  c
192.468 282.890 l
193.000 282.890 193.372 282.872 193.585 282.835  c
193.799 282.799 193.992 282.721 194.164 282.601  c
194.335 282.481 194.484 282.312 194.609 282.093  c
194.875 282.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 195.500 m
193.742 195.500 l
S
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 117.700 m
193.742 117.700 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.875 126.093 m
194.187 128.000 l
188.328 128.000 l
188.328 127.734 l
190.046 126.161 191.257 124.875 191.960 123.875  c
192.664 122.875 193.015 121.963 193.015 121.140  c
193.015 120.515 192.822 120.000 192.437 119.593  c
192.052 119.187 191.588 118.984 191.046 118.984  c
190.567 118.984 190.132 119.127 189.742 119.414  c
189.351 119.700 189.062 120.119 188.875 120.671  c
188.609 120.671 l
188.734 119.765 189.049 119.070 189.554 118.585  c
190.059 118.101 190.687 117.859 191.437 117.859  c
192.250 117.859 192.924 118.119 193.460 118.640  c
193.997 119.161 194.265 119.770 194.265 120.468  c
194.265 120.968 194.151 121.474 193.921 121.984  c
193.557 122.776 192.968 123.609 192.156 124.484  c
190.947 125.817 190.187 126.619 189.875 126.890  c
192.468 126.890 l
193.000 126.890 193.372 126.872 193.585 126.835  c
193.799 126.799 193.992 126.721 194.164 126.601  c
194.335 126.481 194.484 126.312 194.609 126.093  c
194.875 126.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 39.9000 m
193.742 39.9000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
194.984 46.3437 m
194.984 47.3750 l
193.640 47.3750 l
193.640 50.0000 l
192.437 50.0000 l
192.437 47.3750 l
188.234 47.3750 l
188.234 46.4375 l
192.843 39.8593 l
193.640 39.8593 l
193.640 46.3437 l
194.984 46.3437 l
h
192.437 46.3437 m
192.437 41.4062 l
188.953 46.3437 l
192.437 46.3437 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 312.200 m
195.742 312.200 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 234.400 m
195.742 234.400 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 156.600 m
195.742 156.600 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 78.7999 m
195.742 78.7999 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
197.742 1.00000 m
195.742 1.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
